package org.snturk.petition;

import jakarta.annotation.Nullable;
import org.immutables.value.Value;
import org.snturk.petition.enums.PetitionType;
import org.snturk.petition.exceptions.InvalidSignatureInfoException;
import org.snturk.petition.model.Issuer;
import org.snturk.petition.signature.SignatureInfo;

import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Function;

@Value.Immutable
public interface PetitionModel {

    /**
     * By default id is generated by idGenerator function, but it can be overridden by setting id explicitly.
     * @return
     */
    @Value.Default
    default @Nullable String getId() {
        return getIdGenerator().apply(this);
    }

    /**
     * Name of the petition
     * @return
     */
    String getName();

    /**
     * Title of the petition
     * @return
     */
    String getTitle();

    /**
     * Issuer or signer of the petition
     * @return
     */
    Set<Issuer> getIssuers();

    /**
     * Content of the petition
     * @return
     */
    String getContent();

    /**
     * Date of the petition
     * @return
     */
    @Value.Default
    default LocalDateTime getIssuedDate() {
        return LocalDateTime.now();
    }

    /**
     * Type of the petition
     * @see PetitionType
     * @return PetitionType
     */
    @Nullable PetitionType getType();

    /**
     * Related attachments of the petition, key is the name of the attachment, value is the java.io.File object
     * @return
     */
    @Nullable Map<String, File> getAttachments();

    /**
     * Function to generate id of the petition
     * @return
     */
    Function<PetitionModel, String> getIdGenerator();

    /**
     * Signature info list of the petition
     */
    List<SignatureInfo> getSignatures();

    /**
     * Returns the signers of the petition
     */
    default Issuer[] getSigners() {
        if (getSignatures() == null || getSignatures().isEmpty()) {
            return new Issuer[0];
        }
        List<Issuer> signers = new ArrayList<>();
        for (SignatureInfo signatureInfo : getSignatures()) {
            signers.addAll(List.of(signatureInfo.getIssuers()));
        }

        return signers.toArray(new Issuer[0]);
    }

    /**
     * Checks the validity of the signature according to the following rules:
     * 1. A petition issue date cannot be after the signature date
     * 2. A petition cannot be signed by the same issuer multiple times
     * 3. A petition cannot be signed by an issuer that is not in the petition issuers list
     * @param signatureInfo SignatureInfo
     */
    default void checkValidity(SignatureInfo signatureInfo) {
        if (getIssuedDate().isAfter(signatureInfo.getSignatureDate())) {
            throw new InvalidSignatureInfoException("Petition issue date cannot be after the signature date");
        }

        if (getSignatures().stream().anyMatch(s -> s.getIssuers().equals(signatureInfo.getIssuers()))) {
            throw new InvalidSignatureInfoException("A petition cannot be signed by the same issuer multiple times");
        }

        if (Objects.deepEquals(getIssuers(), signatureInfo.getIssuers())) {
            throw new InvalidSignatureInfoException("A petition cannot be signed by an issuer that is not in the petition issuers list");
        }
    }

}
